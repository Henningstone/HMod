# This file lists all lua events that exist.


Entity:
  - [Entity]()  # a function with the same name as the luaclass acts as a constructor
  - OnInsert()  # always applies to all entities

  - Destroy()
  - Reset()
  - Tick()
  - TickDefend()
  - TickPaused()
  - Snap(int SnappingClient)

  - Character:
    - inherit all
    - OnDeath(int KillerCID, int WeaponID)  # called when this character dies
    - OnWeaponFire(int ActiveWeaponSlot, vec2 ProjStartPos, vec2 Direction)
    - PreHammerHit(CCharacter target, vec2 Force, int Damage, int m_ActiveWeaponSlot)

  - Flag:
    - inherit only:
      - Reset
      - TickPaused
      - Snap

  - Laser:
    - inherit all but:
      - TickDefend

  - Pickup:
    - inherit all but:
      - TickDefend
      - OnPickedUp(CCharacter Pickuper)  # called, when the pickup has intersected with a player
      - OnRespawn()  # called when the pickup respawns after having been picked up

  - Projectile:
    - inherit all but:
      - TickDefend

  - CustomEntity:
    - inherit all

Player:
  - Player()  # ctor
  - Tick()
  - PostTick()
  - Snap()
  - OnDisconnect(string Reason)
  - SetTeam(int Team, bool DoChatMsg)

Gameserver:
  - OnShutdown()
  - OnChat(string Msg, int ClientID, int Team)  # Team can be: -1 -> Spec, 0 -> Global, 1 -> Red, 2 -> Blue
  - OnCallVote(int ClientID, string Type, string Value, string Reason)  # Type := { "option"; "kick"; "spectate" }
  - OnVote(int ClientID, int Vote)  # Vote := { -1; 1 }
  - OnSetTeam(int ClientID, int Team)
  - OnEmote(int ClientID, int Emote)

Server:
  - OnRconAuth(int ClientID, string GivenPassword)  # return: nothing = handle natively, true = admin, false = rejected, number = custom access level
  - OnRconCommand(int ClientID, string Command)  # return true if the command was handled by lua (will make c++ comletely ignore it)

GameController:
  - OnEntity(int Index, vec2 Pos)  # Called for each unknown gamelayer tile when loading the map - return true if handled, false if not
